#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require File.expand_path( File.join(File.dirname(__FILE__), %w[.. lib doppelganger]) )

class Doppelganger::CLI
  def self.parse(args)
    options = OpenStruct.new
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: doppelganger [options] directory"
      
      opts.separator ""
      opts.separator "Options:"
      
      opts.on('-t', "--threshold [N]", Integer, "The number of node differences to print blocks for.") do |n|
        options.threshold = n
      end
      
      opts.on('-p', "--percentage [N]", Integer, "The percent difference to look for in two blocks.") do |n|
        options.percentage = n
      end
      
      opts.separator ""
      
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opts.on_tail("--version", "Show version") do
        puts "#{program_name} #{Doppelganger::Version}"
        exit
      end
    end
    
    opts.parse!(ARGV)
    if ARGV.length < 1
      puts "ERROR: Missing expected arguments. ou must specify a directory parameter."
      puts
      puts opts.help
      exit
    elsif ARGV.length > 1
      puts "ERROR: Too many arguments. Only a directory is needed."
      puts
      puts opts.help
      exit
    else
      options.dir = ARGV.shift
    end
    
    @options = options
    @root_path = File.expand_path(@options.dir)
  end
  
  def self.run(args)
    parse(args)
    @doppelganger = Doppelganger::Analyzer.new(@options.dir)
    @filename_length = longest_filename(@doppelganger.sexp_blocks)
    
    duplicates = @doppelganger.duplicates
    display_block_sets duplicates, "DUPLICATES:\n", 'Duplicated Block Set:'
    
    if @options.threshold
      similar_methods = @doppelganger.diff(@options.threshold)
      display_block_sets similar_methods, "MAX DIFF of #{@options.threshold} NODES:\n", 'Similar Block Pair:'
    end
    
    if @options.percentage
      similar_methods = @doppelganger.percent_diff(@options.percentage)
      display_block_sets similar_methods, "PERCENT DIFF of #{@options.percentage}%:\n", 'Similar Block Pair:'
    end
  end
  
  def self.display_block_sets(set, title, set_title)
    unless set.empty?
      puts title
      set.each do |block_set|
        puts set_title
        block_set.each do |block_node|
          if block_node.respond_to?(:name)
            display_filename_line_and_method_name(block_node)
          else
            display_filename_and_line(block_node)
          end
        end
      end
      puts
    end
  end
  
  def self.display_filename_line_and_method_name(method_defn)
    puts sprintf('     %1$*4$s:#%2$*5$d   `%3$s`', format_filename(method_defn.filename), 
                                           method_defn.line.to_i, method_defn.name, 
                                           -@filename_length.to_i, -5)
  end
  
  def self.display_filename_and_line(block_node)
    puts sprintf('     %1$*3$s:#%2$*4$d', format_filename(block_node.filename), 
                                           block_node.line.to_i, -@filename_length.to_i, -5)
  end
  
  def self.format_filename(filename)
    relative_filename = filename.gsub(@root_path, '.')
    relative_filename.size > @filename_length ? relative_filename[-@filename_length, @filename_length] : relative_filename
  end
  
  def self.longest_filename(nodes)
    max_filename_length = nodes.map{|n| n.filename.gsub(@root_path, '.').size}.max
    max_filename_length > 30 ? 30 : max_filename_length
  end
end

Doppelganger::CLI.run(ARGV)

